
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery_output/flanking_sequences/plot_sequence_comparison.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_output_flanking_sequences_plot_sequence_comparison.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_output_flanking_sequences_plot_sequence_comparison.py:


Inspect difference of flanking sequence due to splice event
===========================================================

Given a PTM identified as having an altered flanking sequence in the alternative isoform and/or due to a splice event, it can be usefult o visualize how the sequences differ. We provide functions to compare the flanking sequences of PTMs based on whether an exonic region is included or excluded

.. GENERATED FROM PYTHON SOURCE LINES 7-15

.. code-block:: Python


    from ptm_pose import helpers
    from ptm_pose.analyze import flank_analysis as afs

    #load example altered flanking sequence data
    altered_flanks = helpers.load_example_data(altered_flanks = True)









.. GENERATED FROM PYTHON SOURCE LINES 16-17

Let's say we have identified TSC2 S946 as a site that has an altered flanking sequence due to a skipped exon event, and we want to compare the flanking sequences of the inclusion and exclusion isoforms. First, grab the data for this PTM and print the sequences:

.. GENERATED FROM PYTHON SOURCE LINES 17-22

.. code-block:: Python

    tsc2_s946 = altered_flanks[(altered_flanks['Gene'] == 'TSC2') & (altered_flanks['PTM Position in Isoform'] == 946)].squeeze()

    print(f'Inclusion Flanking Sequence: {tsc2_s946["Inclusion Flanking Sequence"]}')
    print(f'Exclusion Flanking Sequence: {tsc2_s946["Exclusion Flanking Sequence"]}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Inclusion Flanking Sequence: NERPKsLRIAR
    Exclusion Flanking Sequence: NERPKsRIQTS




.. GENERATED FROM PYTHON SOURCE LINES 23-24

This is useful, but is not the most interpretable. We can use the `show_sequence_differences` function to get a more interpretable view of the differences between the flanking sequences:

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: Python


    afs.plot_sequence_differences(tsc2_s946['Inclusion Flanking Sequence'], tsc2_s946['Exclusion Flanking Sequence'], dpsi = tsc2_s946['dPSI'])




.. image-sg:: /gallery_output/flanking_sequences/images/sphx_glr_plot_sequence_comparison_001.png
   :alt: plot sequence comparison
   :srcset: /gallery_output/flanking_sequences/images/sphx_glr_plot_sequence_comparison_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 28-29

By including the dPSI value, we can see which isoform sequence is more present in the treatment samples. This can be useful for understanding the potential impact of the altered flanking sequence on the PTM.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.158 seconds)


.. _sphx_glr_download_gallery_output_flanking_sequences_plot_sequence_comparison.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sequence_comparison.ipynb <plot_sequence_comparison.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sequence_comparison.py <plot_sequence_comparison.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_sequence_comparison.zip <plot_sequence_comparison.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
