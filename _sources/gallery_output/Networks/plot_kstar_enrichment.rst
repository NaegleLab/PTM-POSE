
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery_output/Networks/plot_kstar_enrichment.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_output_Networks_plot_kstar_enrichment.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_output_Networks_plot_kstar_enrichment.py:


Identify kinases with enriched substrates in differentially included exons, using an adapted version of KSTAR
=============================================================================================================

Given that phosphorlaiton are one of the most commonly impacted modifications, there is potential for kinases targeting these sites to be indirectly impacted by alternative splicing through changes in the availability of their substrates. While we provide functions for performing enrichment of known kinase substrates from databases like PhosphoSitePlus, RegPhos, and PTMsigDB, these resources are limited by the overall number of validated substrates (<5%). For this purpose, we have adapted a previously developed algorithm called KSTAR (Kinase Substrate to Activity Relationships) for use with spliced PTM data, which harnesses kinase-substrate predictions to expand the overall number of phosphorylation sites that can be used as evidence. This particularly important as you may find many of the spliced PTMs in your dataset are less well studied and may not have any annotated kinases.

.. note::
    In order to perform KSTAR analysis, you will first need to download KSTAR networks from the following [figshare](https://figshare.com/articles/dataset/NETWORKS/14944305?file=28768155). Once you have downloaded the networks, all you need is your PTM splicing data and the directory location of the networks to run the analysis.

.. GENERATED FROM PYTHON SOURCE LINES 10-24

.. code-block:: Python


    from ptm_pose import helpers
    from ptm_pose.analyze import enzyme


    #load example differential inclusion data
    spliced_ptms = helpers.load_example_data(spliced_ptms = True)

    #perform kstar enrichment for tyrosine phosphorylation, denoted by "Y"
    network_dir = '../../Gallery/NetworKIN/'
    kstar_enrichment = enzyme.kstar_enrichment(spliced_ptms, network_dir = network_dir, phospho_type = 'Y')
    kstar_enrichment.run_kstar_enrichment()
    kstar_enrichment.return_enriched_kinases()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Processing differentially included phosphotyrosine data
    6 PTMs removed due to insignificant splice event (p < 0.05, dpsi >= 0.1): (24.00%)
    Final number of PTMs to be assessed: 19

    Processing background phosphotyrosine data
    Final number of PTMs to be assessed: 41,910
    Running enrichment for Y data:   0%|          | 0/3 [00:00<?, ?it/s]    Running enrichment for Y data:  33%|███▎      | 1/3 [00:14<00:29, 14.82s/it]    Running enrichment for Y data:  67%|██████▋   | 2/3 [00:29<00:14, 14.73s/it]    Running enrichment for Y data: 100%|██████████| 3/3 [00:37<00:00, 11.84s/it]    Running enrichment for Y data: 100%|██████████| 3/3 [00:37<00:00, 12.63s/it]

    {'Y': array(['FYN', 'TYK2'], dtype=object)}



.. GENERATED FROM PYTHON SOURCE LINES 25-26

You can also run the same analysis for serine/threonine kinases:

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: Python

    kstar_enrichment = enzyme.kstar_enrichment(spliced_ptms, network_dir = network_dir, phospho_type = 'ST')
    kstar_enrichment.run_kstar_enrichment()
    kstar_enrichment.return_enriched_kinases()



.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Processing differentially included phosphoserine/threonine data
    97 PTMs removed due to insignificant splice event (p < 0.05, dpsi >= 0.1): (31.60%)
    Final number of PTMs to be assessed: 210

    Processing background phosphoserine/threonine data
    Final number of PTMs to be assessed: 211,301
    Running enrichment for ST data:   0%|          | 0/3 [00:00<?, ?it/s]    Running enrichment for ST data:  33%|███▎      | 1/3 [04:08<08:16, 248.39s/it]    Running enrichment for ST data:  67%|██████▋   | 2/3 [07:25<03:38, 218.19s/it]    Running enrichment for ST data: 100%|██████████| 3/3 [10:15<00:00, 196.39s/it]    Running enrichment for ST data: 100%|██████████| 3/3 [10:15<00:00, 205.30s/it]

    {'ST': array(['CDK4', 'IKBKB', 'MAPK14', 'MAPK7', 'PRKCE', 'PRKCG', 'PRKD1',
           'PRKG2', 'ROCK1'], dtype=object)}




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (11 minutes 2.452 seconds)


.. _sphx_glr_download_gallery_output_Networks_plot_kstar_enrichment.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_kstar_enrichment.ipynb <plot_kstar_enrichment.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_kstar_enrichment.py <plot_kstar_enrichment.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_kstar_enrichment.zip <plot_kstar_enrichment.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
