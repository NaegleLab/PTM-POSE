
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery_output/plot_kstar_enrichment.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_output_plot_kstar_enrichment.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_output_plot_kstar_enrichment.py:


Identify kinases with enriched substrates in differentially included exons, using an adapted version of KSTAR
=============================================================================================================

Given that phosphorlaiton are one of the most commonly impacted modifications, there is potential for kinases targeting these sites to be indirectly impacted by alternative splicing through changes in the availability of their substrates. While we provide functions for performing enrichment of known kinase substrates from databases like PhosphoSitePlus, RegPhos, and PTMsigDB, these resources are limited by the overall number of validated substrates (<5%). For this purpose, we have adapted a previously developed algorithm called KSTAR (Kinase Substrate to Activity Relationships) for use with spliced PTM data, which harnesses kinase-substrate predictions to expand the overall number of phosphorylation sites that can be used as evidence. This particularly important as you may find many of the spliced PTMs in your dataset are less well studied and may not have any annotated kinases.

In order to perform KSTAR analysis, you will first need to download KSTAR networks from the following [figshare](https://figshare.com/articles/dataset/NETWORKS/14944305?file=28768155).

Once you have downloaded the networks, all you need is your PTM data. You will need to run analysis for tyrosine kinases (Y) and serine/threonine kinases (ST)

.. GENERATED FROM PYTHON SOURCE LINES 11-24

.. code-block:: Python


    from ptm_pose import analyze
    import pandas as pd

    # Load spliced ptm and altered flank data
    spliced_ptms = pd.read_csv('spliced_ptms.csv')

    #perform kstar enrichment for tyrosine phosphorylation, denoted by "Y"
    network_dir = './NetworKIN/'
    kstar_enrichment = analyze.kstar_enrichment(spliced_ptms, network_dir = network_dir, phospho_type = 'Y')
    kstar_enrichment.run_kstar_enrichment()
    kstar_enrichment.return_enriched_kinases()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array(['CSF1R', 'ERBB2', 'FYN', 'LCK', 'HCK'], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 25-26

You can also run the same analysis for serine/threonine kinases:

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: Python

    kstar_enrichment = analyze.kstar_enrichment(spliced_ptms, network_dir = network_dir, phospho_type = 'ST')
    kstar_enrichment.run_kstar_enrichment()
    kstar_enrichment.return_enriched_kinases()



.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array(['PRKG2', 'MAPK14', 'PRKCH', 'PRKCG', 'PRKD1', 'PRKCE', 'ROCK1',
           'TTK'], dtype=object)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (5 minutes 2.439 seconds)


.. _sphx_glr_download_gallery_output_plot_kstar_enrichment.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_kstar_enrichment.ipynb <plot_kstar_enrichment.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_kstar_enrichment.py <plot_kstar_enrichment.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_kstar_enrichment.zip <plot_kstar_enrichment.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
